from tkinter import *
import tkinter as tk
from tkinter import ttk, messagebox
from PIL import Image, ImageTk

def celsius_to_fahrenheit(celsius):
    return (celsius * 9/5) + 32

def celsius_to_kelvin(celsius):
    return celsius + 273.15

def fahrenheit_to_celsius(fahrenheit):
    return (fahrenheit - 32) * 5/9

def fahrenheit_to_kelvin(fahrenheit):
    return fahrenheit_to_celsius(fahrenheit) + 273.15

def kelvin_to_celsius(kelvin):
    return kelvin - 273.15

def kelvin_to_fahrenheit(kelvin):
    return celsius_to_fahrenheit(kelvin_to_celsius(kelvin))

def convert_temperature(value, unit):
    if unit == 'C':
        celsius = value
        fahrenheit = celsius_to_fahrenheit(celsius)
        kelvin = celsius_to_kelvin(celsius)
    elif unit == 'F':
        fahrenheit = value
        celsius = fahrenheit_to_celsius(fahrenheit)
        kelvin = fahrenheit_to_kelvin(fahrenheit)
    elif unit == 'K':
        kelvin = value
        celsius = kelvin_to_celsius(kelvin)
        fahrenheit = kelvin_to_fahrenheit(kelvin)
    else:
        raise ValueError("Invalid unit. Please select 'C' for Celsius, 'F' for Fahrenheit, or 'K' for Kelvin.")
    return celsius, fahrenheit, kelvin

def convert():
    try:
        value = float(temp_value.get())
        unit = temp_unit.get()
        celsius, fahrenheit, kelvin = convert_temperature(value, unit)

        result_celsius.config(text=f"{celsius:.2f} °C")
        result_fahrenheit.config(text=f"{fahrenheit:.2f} °F")
        result_kelvin.config(text=f"{kelvin:.2f} K")
    except ValueError as e:
        messagebox.showerror("Error", str(e))

root = tk.Tk()
root.title("Temperature Converter")

style = ttk.Style()
style.configure("TFrame", background="#f4f4f9")
style.configure("TLabel", background="#f4f4f9", font=("Arial", 12))
style.configure("TButton", background="#007bff", foreground="white", font=("Arial", 12), padding=6)
style.map("TButton", background=[("active", "#0056b3")])

frame = ttk.Frame(root, padding="20")
frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

title_label = ttk.Label(frame, text="Temperature Converter", font=("Arial", 18, "bold"))
title_label.grid(column=0, row=0, columnspan=2, pady=10)

# Load and place icons
temp_icon = Image.open(r"C:\Users\mercy\OneDrive\Pictures\Screenshots\Screenshot 2024-06-08 154047.png")
temp_icon = temp_icon.resize((30, 30))
temp_icon = ImageTk.PhotoImage(temp_icon)
icon_label = ttk.Label(frame, image=temp_icon, background="#f4f4f9")
icon_label.grid(column=0, row=1, pady=5)

unit_icon = Image.open(r"C:\Users\mercy\Downloads\icon1.jpeg")
unit_icon = unit_icon.resize((30, 30))
unit_icon = ImageTk.PhotoImage(unit_icon)
icon_label2 = ttk.Label(frame, image=unit_icon, background="#f4f4f9")
icon_label2.grid(column=0, row=2, pady=5)

# Add input fields
ttk.Label(frame, text="Temperature Value:").grid(column=1, row=1, sticky=tk.W, pady=5)
temp_value = ttk.Entry(frame, width=10, font=("Arial", 12))
temp_value.grid(column=2, row=1, sticky=(tk.W, tk.E), pady=5)

ttk.Label(frame, text="Unit (C, F, K):").grid(column=1, row=2, sticky=tk.W, pady=5)
temp_unit = ttk.Combobox(frame, values=["C", "F"    , "K"], font=("Arial", 12), state="readonly")
temp_unit.grid(column=2, row=2, sticky=(tk.W, tk.E), pady=5)
temp_unit.current(0)

convert_button = ttk.Button(frame, text="Convert", color command=convert)
convert_button.grid(column=0, row=3, columnspan=3, pady=15)

results_frame = ttk.Frame(root, padding="10")
results_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

ttk.Label(results_frame, text="Celsius:").grid(column=0, row=0, sticky=tk.W, pady=5)
result_celsius = ttk.Label(results_frame, text="", font=("Arial", 12, "bold"))
result_celsius.grid(column=1, row=0, sticky=(tk.W, tk.E), pady=5)

ttk.Label(results_frame, text="Fahrenheit:").grid(column=0, row=1, sticky=tk.W, pady=5)
result_fahrenheit = ttk.Label(results_frame, text="", font=("Arial", 12, "bold"))
result_fahrenheit.grid(column=1, row=1, sticky=(tk.W, tk.E), pady=5)

ttk.Label(results_frame, text="Kelvin:").grid(column=0, row=2, sticky=tk.W, pady=5)
result_kelvin = ttk.Label(results_frame, text="", font=("Arial", 12, "bold"))
result_kelvin.grid(column=1, row=2, sticky=(tk.W, tk.E), pady=5)

for child in frame.winfo_children():
    child.grid_configure(padx=10, pady=5)

for child in results_frame.winfo_children():
    child.grid_configure(padx=10, pady=5)

root.columnconfigure(0, weight=1)
root.rowconfigure(0, weight=1)
root.rowconfigure(1, weight=1)

root.mainloop()
